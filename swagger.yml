swagger: "2.0"
info:
  description: "Dies ist die REST-API für den Bewegungsmelder"
  version: "0.0.1"
  title: "Bewegungsmelder"
  contact:
    email: "team@bewegungsmelder-aachen.de"
  license:
    name: "Dont know license yet"
    url: "https://example.com"
basePath: "/api"
tags:
- name: "Home"
  description: "Website des Bewegungsmelders"
  externalDocs:
    description: "Zur Startseite geht's hier lang"
    url: "https://bewegungsmelder-aachen.de"
schemes:
- "http"
- "https"
consumes:
  - application/json
produces:
  - application/json
paths:
  /event/by-day/{date}:
    get:
      tags:
      - "event"
      summary: "Finds events by day"
      operationId: "backend.api.event_controller.get_day_events"
      parameters:
      - name: "date"
        in: "path"
        description: "The date for which events should be shown, format according to RFC3339 - YYYY-MM-DD"
        required: true
        type: "string"
        format: "date"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Event"
        400:
          description: "Invalid date"
        404:
          description: "No events found for that day"
  /event:
    get:
      tags:
        - "event"
      summary: "Finds events according to filter"
      operationId: "backend.api.event_controller.get_filtered_events"
      parameters:
        - name: "from_datetime"
          in: "query"
          description: "Events happening at this time or later, format according to RFC3339, for example 2017-07-21T17:32:28Z, defaults to current date and time"
          required: false
          type: "string"
          format: "date-time"
        - name: "page"
          in: "query"
          description: "Page number if the results are more than the number of entries per page"
          required: false
          type: "integer"
          format: "int32"
          minimum: 0
          default: 1
        - name: "per_page"
          in: "query"
          description: "Number of events per page"
          required: false
          type: "integer"
          format: "int32"
          minimum: 1
          default: 20
        - name: "group_ids"
          in: "query"
          description: "filter by group id, multiple separated by ','"
          required: false
          type: "string"
          pattern: '^[0-9,]+$'
        - name: "location_ids"
          in: "query"
          description: "filter by location id, multiple separated by ','"
          required: false
          type: "string"
          pattern: '^[0-9,]+$'
        - name: "types"
          in: "query"
          description: "filter by event type, multiple separated by ';'"
          required: false
          type: "string"
        - name: "terms"
          in: "query"
          description: "filter by term slug, multiple separated by ','"
          required: false
          type: "string"
        - name: "text"
          in: "query"
          description: "search for text in title, this only validates for letters and space, search is performed case-
          and accent-insensitive, that means ä==A"
          required: false
          type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Event"
        400:
          description: "Invalid input, e.g. datetime or text"
        404:
          description: "No events found for these filters"
  /event/{event_id}:
    get:
      tags:
      - "event"
      summary: "Find event by ID"
      description: "Returns a single event"
      operationId: "backend.api.event_controller.get_single_event"
      parameters:
      - name: "event_id"
        in: "path"
        description: "ID of event to return"
        required: true
        type: "integer"
        format: "int32"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/FullEvent"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Event not found"
  /event/{event_slug}:
    get:
      tags:
        - "event"
      summary: "Find event by slug"
      description: "Returns a single event"
      operationId: "backend.api.event_controller.get_single_event_by_slug"
      parameters:
        - name: "event_slug"
          in: "path"
          description: "slug of event to return"
          required: true
          type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/FullEvent"
        400:
          description: "Invalid slug supplied"
        404:
          description: "Event not found"
  /event/terms:
    get:
      tags:
        - "event"
      summary: "Lists all terms applicable to events"
      operationId: "backend.api.term_controller.get_all_event_terms"
      parameters:
      - name: "text"
        in: "query"
        description: "search for text in name, this only validates for letters and space, search is performed case-
       and accent-insensitive, that means ä==A"
        required: false
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Term"
        400:
          description: "Invalid slug supplied"
        404:
          description: "No terms found"

  /group/{group_id}:
    get:
      tags:
      - "group"
      summary: "Find group by ID"
      description: "Returns a group"
      operationId: "backend.api.group_controller.get_single_group"
      parameters:
      - name: "group_id"
        in: "path"
        description: "ID of group to return"
        required: true
        type: "integer"
        format: "int32"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/FullGroup"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Group not found"
  /group/{group_slug}:
    get:
      tags:
        - "group"
      summary: "Find group by slug"
      description: "Returns a group"
      operationId: "backend.api.group_controller.get_single_group_by_slug"
      parameters:
        - name: "group_slug"
          in: "path"
          description: "Slug of group to return"
          required: true
          type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/FullGroup"
        400:
          description: "Invalid slug supplied"
        404:
          description: "Group not found"
  /group:
    get:
      tags:
        - "group"
      summary: "Lists groups"
      operationId: "backend.api.group_controller.get_filtered_groups"
      parameters:
        - name: "page"
          in: "query"
          description: "Page number if the results are more than the number of entries per page"
          required: false
          type: "integer"
          format: "int32"
          minimum: 0
          default: 1
        - name: "per_page"
          in: "query"
          description: "Number of groups per page"
          required: false
          type: "integer"
          format: "int32"
          minimum: 1
          default: 20
        - name: "terms"
          in: "query"
          description: "filter by term slug, multiple separated by ','"
          required: false
          type: "string"
        - name: "text"
          in: "query"
          description: "search for text in title, this only validates for letters and space, search is performed case-
        and accent-insensitive, that means ä==A"
          required: false
          type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Group"
        400:
          description: "Invalid input, e.g. search text"
        404:
          description: "No groups found"
  /group/terms:
    get:
      tags:
        - "group"
      summary: "Lists all terms applicable to groups"
      operationId: "backend.api.term_controller.get_all_group_terms"
      parameters:
        - name: "text"
          in: "query"
          description: "search for text in name, this only validates for letters and space, search is performed case-
        and accent-insensitive, that means ä==A"
          required: false
          type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Term"
        400:
          description: "Invalid slug supplied"
        404:
          description: "No terms found"

  /location/{location_id}:
    get:
      tags:
        - "location"
      summary: "Find location by ID"
      description: "Returns a location"
      operationId: "backend.api.location_controller.get_single_location"
      parameters:
        - name: "location_id"
          in: "path"
          description: "ID of location to return"
          required: true
          type: "integer"
          format: "int32"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/FullLocation"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Location not found"
  /location/{location_slug}:
    get:
      tags:
        - "location"
      summary: "Find location by slug"
      description: "Returns a location"
      operationId: "backend.api.location_controller.get_single_location_by_slug"
      parameters:
        - name: "location_slug"
          in: "path"
          description: "slug of location to return"
          required: true
          type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/FullLocation"
        400:
          description: "Invalid slug supplied"
        404:
          description: "Location not found"
  /location:
    get:
      tags:
        - "location"
      summary: "Lists locations"
      operationId: "backend.api.location_controller.get_filtered_locations"
      parameters:
        - name: "page"
          in: "query"
          description: "Page number if the results are more than the number of entries per page"
          required: false
          type: "integer"
          format: "int32"
          minimum: 0
          default: 1
        - name: "per_page"
          in: "query"
          description: "Number of groups per page"
          required: false
          type: "integer"
          format: "int32"
          minimum: 1
          default: 20
        - name: "text"
          in: "query"
          description: "search for text in title, this only validates for letters and space, search is performed case-
        and accent-insensitive, that means ä==A"
          required: false
          type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Location"
        400:
          description: "Invalid input, e.g. search text"
        404:
          description: "No locations found"

definitions:
  Group:
    type: "object"
    properties:
      slug:
        type: "string"
      name:
        type: "string"
    xml:
      name: "Group"
  FullGroup:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
      description:
        type: "string"
      created:
        type: "string"
        format: "date-time"
      slug:
        type: "string"
      cover:
        type: "string"
      avatar:
        type: "string"
      contact_email:
        type: "string"
      contact_name:
        type: "string"
      meetup_description:
        type: "string"
      website:
        type: "string"
      telephone:
        type: "string"
      metadata:
        type: "object"
        additionalProperties:
          type: "string"
      terms:
        type: "array"
        items:
          $ref: "#/definitions/Term"
    xml:
      name: "FullGroup"
  Location:
    type: "object"
    properties:
      slug:
        type: "string"
      name:
        type: "string"
    xml:
      name: "Location"
  FullLocation:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
      town:
        type: "string"
      address:
        type: "string"
      slug:
        type: "string"
      content:
        type: "string"
    xml:
      name: "FullLocation"
  Event:
    type: "object"
    required:
    - "name"
    properties:
      slug:
        type: "string"
      group:
        $ref: "#/definitions/Group"
      name:
        type: "string"
        example: "Plenum 1"
      type:
        type: "string"
        example: "Aktion"
      start:
        type: "string"
        format: "date-time"
      end:
        type: "string"
        format: "date-time"
      location:
        $ref: "#/definitions/Location"
    xml:
      name: "Event"
  FullEvent:
    type: "object"
    required:
      - "name"
    properties:
      id:
        type: "integer"
        format: "int64"
      group:
        $ref: "#/definitions/Group"
      name:
        type: "string"
        example: "Plenum 1"
      category:
        type: "string"
        example: "Aktion"
      start:
        type: "string"
        format: "date-time"
      end:
        type: "string"
        format: "date-time"
      location:
        $ref: "#/definitions/Location"
      all_day:
        type: "boolean"
      content:
        type: "string"
      slug:
        type: "string"
      image:
        type: "string"
      telephone:
        type: "string"
      accessible:
        type: "string"
      contact_email:
        type: "string"
      website:
        type: "string"
      metadata:
        type: "object"
        additionalProperties:
          type: "string"
      terms:
        type: "array"
        items:
          $ref: "#/definitions/Term"
    xml:
      name: "FullEvent"
  Term:
    type: "object"
    properties:
      slug:
        type: "string"
      name:
        type: "string"
    xml:
      name: "Term"
externalDocs:
  description: "Quellcode und Lizenz auf Github"
  url: "https://github.com/BewegungsmelderAC"